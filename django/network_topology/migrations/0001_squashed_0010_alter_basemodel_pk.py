# Generated by Django 3.2.13 on 2022-09-19 21:24

from django.db import migrations, models
import django.db.migrations.operations.special
import django.db.models.deletion
import django.utils.timezone
import network_topology.models.base_model


class Migration(migrations.Migration):

    replaces = [('network_topology', '0001_initial'), ('network_topology', '0002_auto_20200729_1619'), ('network_topology', '0003_auto_20210521_1647'), ('network_topology', '0004_auto_20210901_1901'), ('network_topology', '0005_auto_20211110_1923'), ('network_topology', '0006_alter_property_id'), ('network_topology', '0007_auto_20220510_1844')]

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='BaseModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grenml_id', models.CharField(blank=True, default=network_topology.models.base_model.auto_uuid, help_text='Supply a unique ID for this item.  IDs are permanent.<br />Minimum: UUID or hash.<br />Good: ID consistent with your REN records, (beware publishing sensitive data).<br />Best: namespace-prefix the above somehow to avoid collisions.<br />Example: "myren-sunlighttransatlantic47"<br />Ideally co-ordinate with other RENs for common IDs of shared infrastructure.<br />If omitted, an ID will be auto-generated for this object.', max_length=128, verbose_name='GRENML ID')),
                ('name', models.CharField(max_length=128, verbose_name='Name')),
                ('version', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='Version')),
                ('dirty', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Institution',
            fields=[
                ('basemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='network_topology.basemodel')),
                ('longitude', models.DecimalField(decimal_places=6, max_digits=9, verbose_name='Longitude')),
                ('latitude', models.DecimalField(decimal_places=6, max_digits=9, verbose_name='Latitude')),
                ('altitude', models.DecimalField(blank=True, decimal_places=6, help_text='The height of the location from sea level, in metres', max_digits=16, null=True, verbose_name='Altitude')),
                ('unlocode', models.CharField(blank=True, max_length=5, null=True, verbose_name='UN/LOCODE')),
                ('address', models.CharField(blank=True, max_length=500, null=True, verbose_name='Address Line')),
                ('short_name', models.CharField(blank=True, max_length=32, null=True, verbose_name='Short Name')),
            ],
            options={
                'verbose_name': 'Institution',
                'verbose_name_plural': 'Institutions',
            },
            bases=('network_topology.basemodel', models.Model),
        ),
        migrations.CreateModel(
            name='NetworkElement',
            fields=[
                ('basemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='network_topology.basemodel')),
                ('owners', models.ManyToManyField(related_name='elements', to='network_topology.Institution')),
                ('short_name', models.CharField(blank=True, max_length=32, null=True, verbose_name='Short Name')),
            ],
            options={
                'verbose_name': 'Network Element',
                'verbose_name_plural': 'Network Elements',
            },
            bases=('network_topology.basemodel',),
        ),
        migrations.CreateModel(
            name='Node',
            fields=[
                ('networkelement_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='network_topology.networkelement')),
                ('longitude', models.DecimalField(decimal_places=6, max_digits=9, verbose_name='Longitude')),
                ('latitude', models.DecimalField(decimal_places=6, max_digits=9, verbose_name='Latitude')),
                ('altitude', models.DecimalField(blank=True, decimal_places=6, help_text='The height of the location from sea level, in metres', max_digits=16, null=True, verbose_name='Altitude')),
                ('unlocode', models.CharField(blank=True, max_length=5, null=True, verbose_name='UN/LOCODE')),
                ('address', models.CharField(blank=True, max_length=500, null=True, verbose_name='Address Line')),
                ('start', models.DateTimeField(blank=True, null=True)),
                ('end', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Network Node',
                'verbose_name_plural': 'Network Nodes',
            },
            bases=('network_topology.networkelement', models.Model),
        ),
        migrations.CreateModel(
            name='Link',
            fields=[
                ('networkelement_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='network_topology.networkelement')),
                ('start', models.DateTimeField(blank=True, null=True)),
                ('end', models.DateTimeField(blank=True, null=True)),
                ('node_a', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='links_a', to='network_topology.node', verbose_name='Link Node A')),
                ('node_b', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='links_b', to='network_topology.node', verbose_name='Link Node B')),
            ],
            options={
                'verbose_name': 'Network Link',
                'verbose_name_plural': 'Network Links',
            },
            bases=('network_topology.networkelement', models.Model),
        ),
        migrations.CreateModel(
            name='Property',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Will be converted to all lower case when saved', max_length=32, verbose_name='Name')),
                ('value', models.CharField(max_length=512, verbose_name='Value')),
                ('property_for', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='properties', to='network_topology.basemodel')),
            ],
            options={
                'verbose_name': 'Property',
                'verbose_name_plural': 'Properties',
            },
        ),
        migrations.CreateModel(
            name='Topology',
            fields=[
                ('basemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='network_topology.basemodel')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='owned_topologies', to='network_topology.institution')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='network_topology.topology')),
            ],
            options={
                'verbose_name': 'Network Topology',
                'verbose_name_plural': 'Network Topologies',
            },
            bases=('network_topology.basemodel',),
        ),
        migrations.AddField(
            model_name='institution',
            name='topologies',
            field=models.ManyToManyField(related_name='institutions', to='network_topology.Topology'),
        ),
        migrations.AddField(
            model_name='link',
            name='topologies',
            field=models.ManyToManyField(related_name='links', to='network_topology.Topology'),
        ),
        migrations.AddField(
            model_name='node',
            name='topologies',
            field=models.ManyToManyField(related_name='nodes', to='network_topology.Topology'),
        ),
    ]
